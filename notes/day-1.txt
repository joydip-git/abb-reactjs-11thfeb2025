https://github.com/joydip-git/abb-reactjs-11thfeb2025


s/w:
	Node JS	=> JS runtime (along with it a package manager s/w is installed, known as NPM or Node Package manager) 
	[link: https://nodejs.org/en]
	>node -v
	>npm -v

	VS Code => Editor [link: https://code.visualstudio.com/download]

React Native:
	a technology/library to create mobile apps

React JS:
	NOT a framework
	It's just a JS library
	Its a front-end development library
	Helps you build front-end app using components very quickly
	it helps you to pass data between the code and the view of the component effortlessly


Component: its a small piece of the front-end which consists of a small piece of design (view) and the corresponding code (event handlers and data)
Angular, React, Vue etc. all use components
a component is nothing but a function in JS which returns a view (design), displaying some data and may be the controls in that design have even event handlers (listeners)

JavaScript => TypeScript (a superset of JS)


HTML => self-closing or empty tag -> a tag without any content or child tags

app development (web) servers -> hosts one app at a time in the dev machine using a port number other than 80

lite-server, live server, webpack dev server etc.


JS data types:
number, string, boolean, object, function

undefined, NaN, Infinity etc.

variables:
var x = 10
x='Joydip'

fuunction add(a,b){
	return a+b
}

add(12,13)
add(12,'joydip')
add(true,'a')

JS is loosely typed language where var (const an let also) keyword(s) is/are used to declare variables. no strict data typing is used. the vlaue of variable is subject to change and to a value of different data type

in JS there is no static type checking, hence it is also known as dynmaic language, since the type checking is done during runtime

TS =>
	a. strict data typing
	b. static type checking

TypeScript is a development mode language
It needs to be converted to JS before execution

Transpiler (Transformation + compilation)
(some other script to javascript and newer version to older version code)
TS => JS -> typescript compiler (tsc)
> npm i typescript -D

tsconfig.json -> configuration file for typescript transpiler
to create this file (should be at the root of the app directory)
>.\node_modules\.bin\tsc --init


NPM => download and install TSC in the app or in the system

global: in the system
	>npm install/i <package-name> --location=global

local: in the application
	>npm install/i <package-name> [-D] (if the package is development mode package)

all packages will be stored inside node_modules folder
executables related to every package will be inside .bin folder inside node_modules

package.json file => maintains the list of dependencies for an application among many other information (such as version no, name, author etc.). the file MUST be at the root fo the app directory.
to create this file use the following command
>npm init [--yes] (yes to all default configuration and its values to be present in the package.json file)


ES => ECMAScript 
the guidline/specificatiion for all scripting languages
TSC version >=5.5.0 can convert any TS code back to mimimum ES5 version not below that version
TSC version < 5.5.0 can convert any TS code back to mimimum ES3/ES2 version not below that version

ES1
ES2
ES3
ES5 -> 2011
ES6 -> 2015
....


welcome component design:

<div>
<h2 id="mainHeader">
    This is JavaScript Components
</h2>
<br/>
<button type='button' id='btnClick'>Click Me!!!</button>
</div>


module loader => understand and resolve dependencies among the JS/TS files and load the dependencies (modules) in the runtime
in any browser there is no module loader, hence you have to supply
requirejs, commonjs, systemjs etc.

require js => this module loader needs a differnt module format (AMD) other than ES module format

different ways to create JS modules
module formats: 
	ES6 module format
		export => export member, 
		import => import {} from './...'

	Common JS module format
		export => module.exports = {member}
		import => var x = require('./...')

	AMD (Asynchronous module definition) format
	export => define('',[], function(){//code})
	import => var x = require('./...')

	UMD (Universal module definition) format
	export => require('',[], function(){//code})
	import => var x = require('./...')

	IIFE (Immediately Invocable Function Expression)
	....


create-react-app tool to create react js app

will help create an React JS application with all the configuratin files, the setting, the transpiler, loader etc.
React JS libraries => react and react-dom

A. create react application with installing create-react-app tool in your system

install create-react-app tool globally in your system
>npm i create-react-app --localtion=global
path: C:\Users\<user-name>\AppData\Roaming\npm

to create an application:
with JS -> create-react-app <app-name> [--template javascript]
with TS -> create-react-app <app-name> --template typescript

B. create react application without installing create-react-app tool in your system

to create an application:
with JS -> >npx create-react-app <app-name> [--template javascript]
with TS -> >npx create-react-app <app-name> --template typescript


to resolve peer dependencies:
npm i --legacy-peer-deps

using Vite to create react app: (and even others)
>npm create vite@latest




React JS component:

Welcome.tsx/.ts

import { createElement } from 'react'
export function Welcome(){
      //var headerReactElement = createElement('h2',{ id:'mainHeader'},'Welcome to React JS')
	//JSX or TSX sytnax
	var  headerReactElement = (
		<h2 id='mainHeader'>
			Welcome to React JS
		</h2>
	);
      return headerReactElement;
}

{
	type:'h2',	
	props:{
		id:'mainHaeder'
		children:['Welcome to React JS']
	}
}

JSX/tsx syntax rules:
----------------------------------
1. one root react element, can't have adjacent elements
2. to bind data and.or event handlers, use {} (any dyanmic data to bind use {})

React JS component displaying list of items:
-----------------------------------------------------------
use item-array.map() method
Note: 
Key property of React Component => used when you generate/create a list of JSX elements. every element in that list must have an unique value for "key" property.


React design best practices:
DO NOT CREATE 'FAT' COMPONENTS. Split the component into several smaller components, each taking responsibility of one task.


Passing data between component:

a. from parent to nested component:
	pass data using props
	props is nothing an object with a collection of properties using which we pass data from parent to nested component function

	Non-JSX
	const propsObj:ProductRowPropType={ productInfo:p, message:welcomeMessage}
	ProductRow(propsObj)

	//ProductRow(p)

	JSX [here properties are attributes]
	<ProductRow productInfo={p} message={welcomeMessage} />
	
	<input type='text' value='welcome'/>

b. from nested to parent:
	by calling a function in the parent component (which has to be passed from the parent to the nested component first)

JS functions:
declaration syntax:
	function add(a,b){ return a+b }
expression syntax
	const/let/var add = function(a,b){return a+b}
expression syntax with arrow operator (arrow function)
	const/let/var add = (a,b) => a+b


type typeA={
	x:number
}
type typeB ={
	y:string
}

type masterType= typeA & typeB

interface IA{
	x:number
}
interface IB{
	y:string
}
interface IMaster:IA,IB{
}


JS new features (introduced in ES6 in 2015):
----------------------------------------------------
spread and rest operator

const anilObj = {
    id: 1,
    name: 'anil',
    salary: 1000
}
//spread operator (...)
const copy = { ...anilObj }
console.log(anilObj);
console.log(copy);

const numbers = [1, 2, 3, 4]
const copyNumbers = [...numbers]

console.log(numbers);
console.log(copyNumbers);

// function calcAvg(name: string, marks: number[]) {

// }


//rest operator (...)
//to declare an array in the function as argument, where any number of parameters (after the fixed number of arguments) can be passed
//ONLY one such array is permitted in the argument lost of the function
function calcAvg(name: string, ...marks: number[]) {
    let sum = 0
    marks.forEach(
        (mark) => {
            sum += mark
        }
    )
    return `${name} has secured avg marks: ${sum / marks.length}`
}
console.log(calcAvg('prabhat', 70, 80))
console.log(calcAvg('joydip', 70, 80, 90))

//document.body.append(e1,e2,e3)







