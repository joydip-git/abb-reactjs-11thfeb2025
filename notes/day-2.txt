component will have data => stateful component
rest of the smaller components will receive the data from parent and nicely present them => presentational component

lifting the state up

state of data: react helps you to maintain the state of the data which you want to be part of the component ONLY (not sharable between components)
react runtime will track the changes made in the state (of data) and will recall the component and passes the updated state of data so that the updated data can be re-rendered 

the state update is asynchronous, i.e., the react runtime does not block the main thread in which the app is running. 

whenever the state update is complete, a new version of VDOM or React Element will be created with updated data. React then will comprae the previous vesion of VDOM for the same component with the new version of VDOM using diff/diffing algo and then will update the already mounted ADOM

state hook:
useState() => hooks up the component with a state, by creating the state with initial data

this method returns an array, where first index has the copy of the data and second index has the refernce to a function to update the state of the data

const arr = useState<T>(initialData)
const data = arr[0]
const updateData = arr[1]

how to update the state of data??
using the function reference (ex: updateData)

NOTE: 
	the state of data should never be update directly by mutating the original state. you should update the state of data by "immutably mutating"
	the component can have many states

w.r.t. my app:
    //state variable-> an array
    const state = useState<Product[]>(initialProductRecords)
    //first index has the copy of the data
    const productState: Product[] = state[0]
    //second index has the refernce to the function to update the state of the data
    const updateProductState = state[1]

    //object (array) destructuring
    const [productState, updateProductState] = useState<Product[]>(initialProductRecords)
	


A 	-> B -> C
call()	


A design:
<B fnHandler={call} />

B component:
type BPropType={
	fnHandler:()=>void
}
export function B(args:BPropType){
	return (
		<C fnHandler={args.fnHandler} />
	)
}


C component:
type CPropType={
	fnHandler:()=>void
}
export function C(args:CPropType){
	return (
		<button onclick={args.fnHandler}>....
	)
}


ProductRow({}) -> <ProductRow ..../>
ProductList()  -> <ProductList ..../> 
	ProductList()  -> <ProductList ..../> 
App()	       -> <App../>


diffing algorithm: finds out the difference between current VDOM and just previous VDOM.

data fetching:
	fetch: DOM API for sending HTTP requests
	axios: 3rd party API for sending HTTP requests	
	>npm i axios
response model(JSON array of some objects) 	   client side model (Product[])
[{},{},{}] 					   => [{},{},{}]

get all products:
HTTP Method: GET
http://localhost:3001/products

get a product:
HTTP Method: GET
http://localhost:3001/products/<id>

add a product:
HTTP Method: POST
http://localhost:3001/products
Content-Type: application/json
Content: through request body send a product object

update an existing product:
HTTP Method: PUT
http://localhost:3001/products/<id>
Content-Type: application/json
Content: through request body send a product object


delete an existing product:
HTTP Method: DELETE
http://localhost:3001/products/<id>

const result = a / b
    if (result === Infinity)
        throw new Error('divisor should not be zero')
    else
        return result


side effect causing code:
any code that causes the component to be re-rendered (that is the side effect) by updating the state of the component

control the side effect causing code: decide when and how many times the side-effect causing code should be executed

effect hook:
useEffect() => hooks up the component with a side effect causing code that should be 
	1. executed always
	2. executed one time
	3. excuted conditionally

useEffect() does not return anything

useEffect(
 ()=>{ //side effect causing code },
 [depndencies]
)
2nd argument (list of dependencies) is optional

a. no depdency array
useEffect( ()=> { //code }) => the side effect causing code will be executed every time the component is called

b. blank/empty dependency array
useEffct( ()=> { //code }, []) => the side effect causing code will be executed ONLY ONE time, the very fisrt time the component is called, NOT every time

c.non-empty dependency array
useEffct( ()=> { //code }, [dependencies])  => the side effect causing code will be executed every time, when the any of values mentioned in the dependency list changes

when the component is called for the very first time (and subsequently mounted), you call useEffect and register a side-effect causing code TO BE excuted later.
after the component function returns the react element (initial design to be displayed), then the rgistered callback function is executed




app routes:
http://localhost:4000		 	=> Home
or
http://localhost:4000/home	 	=> Home

http://localhost:4000/products   	=> PL (nested PR components)

http://localhost:4000/products/view/1 	=> PD

http://localhost:4000/products/add 	=> AP

any other url				=> PNF 

react-router and react-router-dom

{ id:"1",name:''}






